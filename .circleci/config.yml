version: 2.1
orbs:
  docker: circleci/docker@1.3.0

# Convert to workflow and add daily execution
jobs:
  All Steps:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      # TODO: Move checking of ansible version to top of file to ensure execution only occurs when there is a new version
      
      # curl -L -s 'https://hub.docker.com/v2/repositories/exsketrix/ansible/tags' | jq '.results[].name' | grep -v latest
      #pip search ansible | egrep ^ansible'[[:space:]]' | awk '{print $2}' | tr -d "()"
      - checkout # check out the code in the project directory
      - run:
          name: "Set Python Version"
          command: pyenv global 3.7.0
      - run:
          name: Install Ansible
          command: |  # use pipenv to install dependencies
            python  --version
            pip install ansible
            pip install docker
      - run:
          name: Create Docker Image
          command: ansible-playbook -i inventory create-docker-image.yml
      - run:
          name: Execute Molecule and Testinfra against built Image
          command: |
            cd roles/${CIRCLE_PROJECT_REPONAME}-role
            docker run --rm -it -v "$(pwd)":/tmp/$(basename "${PWD}"):rw -v /var/run/docker.sock:/var/run/docker.sock -w /tmp/$(basename "${PWD}") quay.io/ansible/molecule:3.0.3 molecule test
      - run:
          name: Execute Ansible Docker Image against a sample playbook
          command: |
            DOCKER_TAG=`docker images | egrep ^${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} | awk '{print $2}'`
            cd test-playbook
            docker run -it --rm -e LOCAL_USER_ID=`id -u $USER` -e LOCAL_DOCKER_GROUP_GID=`getent group docker | cut -d ':' -f3` -v /var/run/docker.sock:/var/run/docker.sock -v ${PWD}:/ansible-playbook ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}:$DOCKER_TAG ansible-playbook -i /ansible-playbook/inventory /ansible-playbook/execute-playbook.yml
      - run:
          name: Check for Critical or High CVEs in Image
          command: |
            DOCKER_TAG=`docker images | egrep ^${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} | awk '{print $2}'`
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy --light --exit-code 1 --no-progress --severity CRITICAL,HIGH --ignore-unfixed ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}:$DOCKER_TAG      
      - run:
          name: Publish to Dockerhub
          command: |
            export DOCKER_CLI_EXPERIMENTAL=enabled
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            DOCKER_TAG=`docker images | egrep ^${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} | awk '{print $2}'`
            TAG_NOT_EXISTS=`docker manifest inspect ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}:$DOCKER_TAG > /dev/null; echo $?`
            if [[ ${TAG_NOT_EXISTS} -eq 1 ]] ; then
              docker tag ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}:$DOCKER_TAG ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}:latest
              docker push ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}:latest
              docker push ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}:$DOCKER_TAG
            fi
            DOCKERPUSHRM_URL=curl -s https://api.github.com/repos/christian-korneck/docker-pushrm/releases/latest | jq -r '.assets[] | select(.name | test("docker-pushrm_linux_amd64")) | .browser_download_url'
            curl -sLO $DOCKERPUSHRM_URL
            mkdir -p $HOME/.docker/cli-plugins/
            mv docker-pushrm_linux_amd64 $HOME/.docker/cli-plugins/
            chmod 755 $HOME/.docker/cli-plugins/docker-pushrm_linux_amd64
            docker pushrm ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}:latest

workflows:
  version: 2
  commit:
    jobs:
      - All Steps
  nightly:
    triggers:
      - schedule:
          cron: "0 5 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - All Steps